----------------------------------------------------------------------
Copyright 2007-2009 Alexey Radul.
----------------------------------------------------------------------
This file is part of Test Manager.

Test Manager is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Test Manager is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Test Manager.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------

Resuccitate the Guile port.

Add a general-purpose pattern matcher, or normal form converter, or
something (incl good handling of records) for use with check.
- A fail function that always fails (but emits its message, yes)

with-test-info macro (and function) adds extra information
to the failure display

Example failure display in SchemeUnit
--------------------
A test
... has a FAILURE
name:       check-pred
location:   (#<path:/Users/noel/programming/schematics/schemeunit/branches/v3/doc/file-test.scm> 14 6 252 22)
expression: (check-pred even? elt)
params:     (#<procedure:even?> 9)
--------------------

Api features
- Is it ok to write (run-test foo bar) inside of a surround definition
  if the tests are all defined to take arguments?  What use can I put
  this to?
  - I could use this for manually simulating something like quickcheck
  - Implement by making the actual run-test take any set of args, and
    applying the internal procedure.
- (in-test-group '(chain of subgroups) ...) could descend down the
  whole chain in one swoop
- (define-deep-set-up ...) could define a setup to be run before each
  test, no really, test not subgroup.
- Do the assertions want to be macros that include the actual code
  of their input expressions in their messages?
  - Should probably provide the procedural versions anyway, for, say, map
- Do I want to offer some find of (let-fixtures (binding ...)
  test-definition ...) facility (that would allow mutation of the fixtures
  internally, but restore them at every test)?
- A way to mark that certain tests or assertions are expected to fail?
  Perhaps with keyword arguments to the appropriate functions?  Grem
  sent email titled "expected failure features for test-manager"

Emacs interface:
- run-test-at-point
  - with the group's setup and teardown
- run-test-group-at-point
- run-tests-in-file
- syntax-highlight define-test
- rerun-last-test-{suite/group/single test}
- run-last-defined-{test/suite/group} ?

Problems:
- The test-runner system is in *desperate* need of refactoring.
  - Use SOS?  Portability issues?
  - Perhaps a function that returns a result object, from which 
    the results can then be printed?
  - How much do I care about this extensibility thing?

I am beginning to realise what languages I am trying to create here.
The current main focus is a language for defining test suites.  It
consists of assertions, tests, and test groups.  There is an
interesting collection of thoughts to be thought about implicitness
and explicitness.  For example, in-test-group arranges an implicit
change in the "current test group", which affects things like
define-test and possibly define-set-up, define-group-set-up, etc.  In
contrast, there is also the explict set-tg:group-set-up! and their
ilk.  The function (current-test-group) functions as a bridge between
the two worlds.

Language for defining test suites
Language for defining individual tests
Language for running tests and getting results
